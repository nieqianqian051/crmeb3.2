---
description: # 项目名称：CRMEB Pro 3.2 系统复刻  ## 项目概述 - 复刻原系统的所有前后端页面及静态资源，前端页面保持原样，不做任何改动。 - 后端业务逻辑将使用 Java 重构（推荐使用 Spring Boot 框架），确保企业级架构、模块化和高可维护性。 - 项目规模较大，常见问题包括长时间运行的进程状态丢失、跨模块数据同步困难、以及复杂错误处理机制等。  ## 全局规则（Global AI Rules）    创建新的文件夹来书写，命名为：maijishop    去除项目原有的商务授权 - **前端不动**：所有前端页面、后台页面及静态资源均直接复制，任何生成或修改的建议都不得更改现有代码。 - **后端重构**：对于后端代码，必须生成 Java 代码（建议使用 Spring Boot 框架），同时保持代码整洁、模块分明，采用依赖注入、AOP 等企业级最佳实践。 - **状态管理**：在生成后端业务逻辑时，特别注意长流程和长时间运行进程的状态管理，确保在跨线程、跨请求场景下，状态不丢失，常见问题如“进程遗忘”要给予特别关注。  ## 项目规则（Project-Specific Rules） - **前端部分**：   - 保持原样：所有 HTML、CSS、JS、模板文件和静态资源（图片、脚本等）直接复用，不进行代码重写或样式修改。   - 在 AI 生成建议时，所有涉及前端页面的生成任务均应直接复制原文件内容。  - **后端部分**：   - 使用 Java 重构：后端功能需完全用 Java 实现，推荐使用 Spring Boot 框架及相关生态（如 Spring MVC、Spring Data）。   - 模块化设计：后端代码应划分为控制层（Controller）、业务层（Service）和数据访问层（Repository），遵循分层架构，代码之间尽量松耦合。   - 状态和进程管理：对于需要长时间运行的任务或后台进程，必须设计合理的状态保持机制，例如采用任务调度（如 Spring 的 @Scheduled）和持久化状态存储，避免进程“遗忘”或状态丢失。   - 错误处理与日志：要求在生成的 Java 代码中使用统一的异常处理机制和日志记录（推荐使用 SLF4J+Logback），确保系统在异常情况下能及时恢复或记录详细错误信息。 # 后端技术选型 - 使用 Spring Boot 作为核心框架 - 数据库统一使用 MySQL - 缓存选型为 Redis - 消息队列可选 RabbitMQ / Kafka / RocketMQ - CI/CD 采用 Jenkins / GitLab CI / GitHub Actions ## 其他指导 - **一致性与文档**：所有生成的代码建议应符合项目的整体架构和编码规范，并在必要时附带注释和设计说明，便于团队维护。 - **多线程与并发**：针对后端可能遇到的并发问题，建议生成的代码中明确处理线程安全、事务管理和并发控制，使用 Spring 框架提供的事务管理机制。 - **迁移与复用**：保持原有前端与静态资源的完整性，不允许生成任何与现有资源冲突的修改建议；仅针对后端生成新代码。
globs: 
alwaysApply: false
---
# 项目名称：CRMEB Pro 3.2 系统复刻

## 项目概述
- **复刻原系统**：所有前后端页面及静态资源直接复制，前端页面保持原样，不做任何改动。
- **后端 Java 重构**：建议使用 Spring Boot 框架，确保企业级架构、模块化和高可维护性。
- **大型项目常见问题**：需要注意长时间运行的进程状态丢失、跨模块数据同步困难、复杂错误处理等。

## 全局规则（Global AI Rules）
- **创建新的文件夹**：将本项目代码存放到名为 `maijishop` 的文件夹中。
- **去除项目原有的商务授权**：保留核心功能和页面，但移除或注释与原商业授权相关的部分。

- **前端不动**  
  所有前端页面、后台页面及静态资源均直接复制，任何生成或修改的建议都不得更改现有代码。

- **后端重构**  
  对于后端代码，必须生成 Java 代码（建议使用 Spring Boot），同时保持代码整洁、模块分明，采用依赖注入、AOP 等企业级最佳实践。

- **状态管理**  
  在生成后端业务逻辑时，特别注意长流程和长时间运行进程的状态管理，确保在跨线程、跨请求场景下，状态不丢失。尤其关注“进程遗忘”或状态丢失问题。

## 项目规则（Project-Specific Rules）
### 前端部分
- **保持原样**  
  - 所有 HTML、CSS、JS、模板文件和静态资源（图片、脚本等）直接复用，不进行代码重写或样式修改。
  - 在 AI 生成建议时，所有涉及前端页面的生成任务均应直接复制原文件内容。

### 后端部分
- **使用 Java 重构**  
  - 后端功能需完全用 Java 实现，推荐使用 Spring Boot 框架及相关生态（如 Spring MVC、Spring Data）。
- **模块化设计**  
  - 后端代码应划分为控制层（Controller）、业务层（Service）和数据访问层（Repository），遵循分层架构，尽量松耦合。
- **状态和进程管理**  
  - 对于需要长时间运行的任务或后台进程，必须设计合理的状态保持机制，例如使用任务调度（@Scheduled）和持久化存储，避免进程“遗忘”或状态丢失。
- **错误处理与日志**  
  - 要求在生成的 Java 代码中使用统一的异常处理机制和日志记录（推荐 SLF4J + Logback），在异常情况下能及时恢复或记录详细错误信息。

## 后端技术选型
- **核心框架**：Spring Boot
- **数据库**：MySQL
- **缓存**：Redis
- **消息队列**：RabbitMQ / Kafka / RocketMQ（三选一或视需求而定）
- **CI/CD**：Jenkins / GitLab CI / GitHub Actions

## 其他指导
- **一致性与文档**  
  - 所有生成的代码建议应符合项目的整体架构和编码规范，并在必要时附带注释或设计说明，便于团队维护。
- **多线程与并发**  
  - 建议在生成的代码中明确处理线程安全、事务管理和并发控制，使用 Spring 框架提供的事务管理机制。
- **迁移与复用**  
  - 保持原有前端与静态资源的完整性，不允许生成任何与现有资源冲突的修改建议；仅针对后端生成新代码。